/******************************************************************************\
FILE:           graphic_animators.zm
AUTHOR:         Chris van Run (UiL-OTS) <C.P.A.vanRun@uu.nl>
ADAPTED BY:     -

ABOUT: describes the timers that take care of animating the intro and 
* the actual throws.

HISTORY:
2014-07-31 CvR   Created.

\******************************************************************************/

import std_sound_output_device;

bool animating()
{
	return animator_intro.is_running || animator_glove.animating || animator_throw.animating;
}

// Animator for the intro, makes the background dissapear halfway through the throw.
Timer animator_intro
{
	bool played;
	
	time begin(time tref)
	{
		dur duration_throw = 3s;
		tref = animator_throw.begin(
			int(graphic_layout.l1.offset_x), //x0
			int(graphic_layout.l1.offset_y), //y0
			game_page.playersList[HUMAN].x, //x1
			game_page.playersList[HUMAN].y, //y1
			duration_throw, //how long to throw
			5, // number of spins
			10., // height
			tref+200ms); //when to start the animation
			
		time half_through_throw = tref - (duration_throw/2);
		start(half_through_throw);
		audio.play(stimuli_dir() + "sounds/" + GAME_PAUZE_SOUND, tref);
		return tref;
	}
	
	on_event:expire()
	{
		graphic_layout.l2.is_visible = false;
		played = true;
	}
}

// Animator for the intro, it is a timer that expires at every refresh rate.
Timer animator_throw
	{	
		bool animating;
		
		real[..] x;
		real[..] y;
		real[..] z;
		real[..] r;

		real start_width;
		real start_height;
		int frame_index = 0;
		
		dur framedur;       // display duration of each frame
		
		CanvasGadget animated_canvas;
		ImageShape animated_image;
		
		time begin(real x0, real y0, real x1, real y1, dur duration, real num_spins, real z_peak, time tref)
		{
			animating = true;
			
			framedur = display_device.refresh_interval; //best solution for screen tearing etc.
			
			animated_image = graphic_layout.l1.ball;
			start_width = animated_image.width;
			start_height = animated_image.height;
			animated_canvas = graphic_layout.l1;
			
			
			int N = int(duration/framedur);
			x.size = N+1; y.size = N+1; z.size = N+1; r.size=N+1;
			
			real difx = x1-x0;
			real dify = y1-y0;
			real dx = difx/N;
			real dy = dify/N;
			
			int index = 0;
			real early_rotation = animated_canvas.rotation;
			
			while(index < x.size)
			{
				x[index] = x0 + ( index * (x1-x0)/N);
				y[index] = y0 + (index * (y1-y0)/N);
				z[index] = 1 + z_peak*sin(M_PI * (1/real(z.size-1))*real(index));
				r[index] = early_rotation + ( ( (2* M_PI) / (z.size-1) ) *  num_spins * real(index) );
				index++;
			}
			
			start(tref);
			return tref+(N*framedur); //the duration is no longer accurate due to floating point 
		}
	
		on_event:expire()
		{				
			dur latency = expire_time-display_device.frame_time;
			
			if(latency >= framedur)
				latency = 0ms;
			
			animated_canvas.offset_x = round(x[frame_index]); 
			animated_canvas.offset_y = round(y[frame_index]);
			
			animated_image.width = round(start_width * z[frame_index]);
			animated_image.height = round(start_height * z[frame_index]);
			
			animated_image.offset_x = round(-(animated_image.width/2));
			animated_image.offset_y = round( -(animated_image.height/2));
			
			animated_canvas.rotation = r[frame_index];
			frame_index++;
			
			if(frame_index >= x.size)
			{
				abort();
				frame_index = 0;
				animating = false;
			}
			else
			{
				start(expire_time + (framedur - latency) + 0.01ms);
			}
		}
	}
	
Timer animator_glove
	{	
		bool animating;
		
		real[..] z;

		real start_width;
		real start_height;
		real start_offset_x;
		real start_offset_y;
		
		int frame_index = 0;
		
		dur framedur;       // display duration of each frame
		
		ImageShape animated_image;
		
		time begin(Player p, dur duration, real scale, time tref)
		{
			framedur = display_device.refresh_interval; //best solution for screen tearing etc.
			
			animated_image = graphic_layout.gloves[p];
			
			start_width = animated_image.width;
			start_height = animated_image.height;
			start_offset_x = animated_image.offset_x;
			start_offset_y = animated_image.offset_y;
			
			int N = int(duration/framedur);
			z.size = N+1;
			
			int index = 0;
			
			while(index < z.size)
			{
				z[index] = 1. - (scale* sin(M_PI * (1/real(z.size-1))*real(index)));
				index++;
			}
			
			start(tref+framedur);
			return tref+(N*framedur); //the duration is no longer accurate due to floating point 
		}
	
		on_event:expire()
		{							
			dur latency = expire_time-display_device.frame_time;
			
			if(latency >= framedur)
				latency = 0ms;
				
			animated_image.width = abs( start_width * z[frame_index]);
			animated_image.height = abs( start_height * z[frame_index]);
			
			animated_image.offset_x = -(animated_image.width/2);
			animated_image.offset_y = -(animated_image.height/2);
			frame_index++;
			
			if(frame_index >= z.size)
			{
				abort();
				frame_index = 0;
				animating = false;
			}
			else
			{
				start(expire_time + (framedur-latency) + 0.01ms);
			}
		}
	}
	
SoundChain audio
	{
		SoundFile clip {}
		SoundPlayback playback {}
		
		time play(string fnm, time tref)
		{
			audio.abort();
			audio_throw.abort();
			playback.device =  sound_output_device;
			clip.file = fnm;
			start(tref);
			return expected_finish_time;
		}
	}
	
SoundChain audio_throw
{
	SoundSequence seq
	{
		SoundFile throw {}
		SoundFile catch {}
	}
	SoundPlayback playback {}
	
	time play(dur glove_animation_duration, dur ball_flying_duration, time tref)
	{
		audio.abort();
		audio_throw.abort();
		playback.device =  sound_output_device;
		
		seq.throw.file = stimuli_dir() + "sounds/" + GAME_THROW_SOUND;
		seq.throw.selection(0, int(glove_animation_duration* samplerate/1000));
		seq.throw.trailer_duration = ball_flying_duration-glove_animation_duration; // it sounds better if the woosh is played right after the ball starts traveling
		seq.catch.file = stimuli_dir() + "sounds/" + GAME_CATCH_SOUND;
		
		start(tref);
		return expected_finish_time;
	}
}


