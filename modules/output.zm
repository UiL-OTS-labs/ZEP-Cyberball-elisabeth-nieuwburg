import game::players;
import game::page;

record RoundSummary
{
	int round_nr;
	bool			switched;
	
	int			first_throw_nr;
	
	int			player_to_left;
	int			player_to_middle;
	int			player_to_right;

	int 		left_to_middle;
	int 		left_to_player;
	int 		left_to_right;

	int 		middle_to_right;
	int			middle_to_player;
	int 		middle_to_left;

	int 		right_to_middle;
	int 		right_to_player;
	int 		right_to_left;

	int			player_received;
	int			left_received;
	int			middle_received;
	int			right_received;
}

// Test phase output table record, defining what is to be logged
record ThrowSummary
{
	int 			round_nr;

	int			throw_nr;
	
	bool			switched;
	
	game::Player		from;
	game::Player		to;
	
	int			RT;
}

RoundSummary[..] game_summaries;

ThrowSummary[..] throw_summaries;

//------------------------------------------------------------------------------

void output_append_throwsummary(ThrowSummary data)
{
    throw_summaries.size = throw_summaries.size + 1;
    throw_summaries[throw_summaries.size-1] = data;
}

void output_append_roundsummary(RoundSummary data)
{
    game_summaries.size = game_summaries.size + 1;
    game_summaries[game_summaries.size-1] = data;
}

void create_roundsummary()
{
	RoundSummary before_switch = make_roundsummary_from_before_switch();
	RoundSummary after_switch = make_roundsummary_from_after_switch();

	output_append_roundsummary(before_switch);
	output_append_roundsummary(after_switch);
}

void throwsummary_save_to_db_and_reset()
{
    // Append table to CSV file (create if non-existent). The filename 
    // format is: <dbname>/<dbnum>/<expname>/ses<sesid>-<tblnum>.csv
     string fn = expdb.experiment.session.create_table(namespace_name, 1);
   throw_summaries.append(fn, namespace_name + "Throw Overview");
   throw_summaries.size = 0;
}

// Writes test phase output table 1 contents to CSV file and clears the table.
void roundsummary_save_to_db_and_reset()
{
    // Append table to CSV file (create if non-existent). The filename 
    // format is: <dbname>/<dbnum>/<expname>/ses<sesid>-<tblnum>.csv
    string fn = expdb.experiment.session.create_table(namespace_name, 2);
    game_summaries.append(fn, namespace_name + "Round Overview");
    game_summaries.size = 0;
}



RoundSummary make_roundsummary_from_before_switch()
{	
	ThrowSummary[] throws = throw_summaries;
	RoundSummary[..] round_summary; round_summary.size=1; //fix around not being able to pass by reference.
	round_summary[0].switched = false;
	round_summary[0].round_nr = game::game_page.game_status.round_nr;

	int i = 0;
	while(i < throws.size)
	{
		ThrowSummary throw = throws[i];
		if(!throw.switched)
			add_throw_to_summary(throw,round_summary);
		i++;
	}
	
	return round_summary[0];
}

RoundSummary make_roundsummary_from_after_switch()
{
	ThrowSummary[] throws = throw_summaries;
	RoundSummary[..] round_summary; round_summary.size=1;
	round_summary[0].switched = true;
	round_summary[0].round_nr = game::game_page.game_status.round_nr;

	int i = 0;
	while(i < throws.size)
	{
		ThrowSummary throw = throws[i];
		if(throw.switched)
			add_throw_to_summary(throw,round_summary);
		i++;
	}
	
	return round_summary[0];
}

void reset_throw_log()
{
	throw_summaries.size=0;
}

void add_throw_to_summary( ThrowSummary throw, RoundSummary[] round_summary)
{
	if( throw.from == game::HUMAN)
	{
		if(throw.to == game::LEFT_BOT)
			round_summary[0].player_to_left++;
		else if(throw.to == game::MIDDLE_BOT)
			round_summary[0].player_to_middle++;
		else if(throw.to == game::RIGHT_BOT)
			round_summary[0].player_to_right++;
	}
	
	else if( throw.from == game::LEFT_BOT)
	{
		if(throw.to == game::HUMAN)
			round_summary[0].left_to_player++;
		else if(throw.to == game::MIDDLE_BOT)
			round_summary[0].left_to_middle++;
		else if(throw.to == game::RIGHT_BOT)
			round_summary[0].left_to_right++;
	}
	
	else if( throw.from == game::MIDDLE_BOT)
	{
		if(throw.to == game::LEFT_BOT)
			round_summary[0].middle_to_left++;
		else if(throw.to == game::HUMAN)
			round_summary[0].middle_to_player++;
		else if(throw.to == game::RIGHT_BOT)
			round_summary[0].middle_to_right++;
	}
	
	else if( throw.from == game::RIGHT_BOT)
	{
		if(throw.to == game::LEFT_BOT)
			round_summary[0].right_to_left++;
		else if(throw.to == game::MIDDLE_BOT)
			round_summary[0].right_to_middle++;
		else if(throw.to == game::HUMAN)
			round_summary[0].right_to_player++;
	}
	
	if ( throw.to == game::HUMAN )
		round_summary[0].player_received++;
	else if ( throw.to == game::LEFT_BOT )
		round_summary[0].left_received++;
	else if ( throw.to == game::MIDDLE_BOT )
		round_summary[0].middle_received++;
	else if ( throw.to == game::RIGHT_BOT )
		round_summary[0].right_received++;
}

// void reset_game_summary(bool switched, int first_throw)
// {
// 	game_summary.switched 		= switched;
	
// 	game_summary.first_throw_nr	= first_throw;
	
// 	game_summary.player_to_left = 0;
// 	game_summary.player_to_middle = 0;
// 	game_summary.player_to_right = 0;
	
// 	game_summary.left_to_middle = 0;
// 	game_summary.left_to_player = 0;
// 	game_summary.left_to_right = 0;
	
// 	game_summary.middle_to_right = 0;
// 	game_summary.middle_to_player = 0;
// 	game_summary.middle_to_left = 0;
	
// 	game_summary.right_to_middle = 0;
// 	game_summary.right_to_player = 0;
// 	game_summary.right_to_left = 0;
	
// 	game_summary.player_received = 0;
// 	game_summary.left_received = 0;
// 	game_summary.middle_received = 0;
// 	game_summary.right_received = 0;
// }
